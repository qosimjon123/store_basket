# Generated by Django 5.2.4 on 2025-07-03 21:36

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='Уникальный идентификатор')),
                ('title', models.CharField(max_length=255, unique=True, verbose_name='Название бренда')),
                ('image', models.CharField(blank=True, help_text='URL изображения логотипа бренда', max_length=255, null=True, verbose_name='Ссылка на логотип')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('is_only_warehouse', models.BooleanField(default=False, help_text='Отметьте, если бренд не продается в розницу', verbose_name='Только для склада')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.CharField(max_length=10, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Полное название товара', max_length=255, verbose_name='Название')),
                ('description', models.CharField(help_text='Краткое описание товара', max_length=255, verbose_name='Описание')),
                ('options', models.JSONField(help_text='Дополнительные характеристики в JSON', verbose_name='Опции')),
                ('internal_sku', models.CharField(help_text='Внутренний артикул товара', max_length=255, verbose_name='Артикул')),
                ('image', models.CharField(blank=True, help_text='URL основного изображения товара', max_length=255, null=True, verbose_name='Главное изображение')),
                ('group_id', models.CharField(help_text='Идентификатор группы товаров', max_length=255, verbose_name='ID группы')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': 'Товары',
                'db_table': 'Products',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Полное название единицы измерения', max_length=255, verbose_name='Название')),
                ('short_name', models.CharField(help_text='Краткое обозначение (кг, л, шт)', max_length=255, verbose_name='Сокращение')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Unix timestamp создания записи', verbose_name='Дата создания (timestamp)')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Unix timestamp обновления записи', verbose_name='Дата обновления (timestamp)')),
            ],
            options={
                'verbose_name': 'Единица измерения',
                'verbose_name_plural': 'Единицы измерения',
                'db_table': 'Units',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='ProductVariant',
            fields=[
                ('id', models.CharField(max_length=12, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, help_text='Цена за единицу товара', max_digits=8, verbose_name='Цена')),
                ('discount', models.IntegerField(default=0, help_text='Процент скидки (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Скидка (%)')),
                ('variant_value', models.CharField(help_text='Значение варианта', max_length=255, verbose_name='Значение варианта')),
                ('variant_attributes', models.CharField(help_text='Значения атрибутов варианта', max_length=255, verbose_name='Значения атрибутов')),
                ('height', models.DecimalField(decimal_places=2, help_text='Высота товара в см', max_digits=10, verbose_name='Высота')),
                ('width', models.DecimalField(decimal_places=2, help_text='Ширина товара в см', max_digits=10, verbose_name='Ширина')),
                ('depth', models.DecimalField(decimal_places=2, help_text='Глубина товара в см', max_digits=10, verbose_name='Глубина')),
                ('barcode', models.CharField(help_text='Штрих-код варианта товара', max_length=255, verbose_name='Штрих-код')),
                ('weight', models.IntegerField(help_text='Вес единицы товара в граммах', verbose_name='Вес (г)')),
                ('product', models.ForeignKey(help_text='Основной товар', on_delete=django.db.models.deletion.CASCADE, to='ProductInfo.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Вариант товара',
                'verbose_name_plural': 'Варианты товаров',
                'db_table': 'Product_variants',
                'ordering': ['product', 'barcode'],
            },
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.CharField(editable=False, max_length=36, primary_key=True, serialize=False, verbose_name='Уникальный идентификатор')),
                ('address', models.TextField(verbose_name='Адрес')),
                ('city', models.CharField(max_length=100, verbose_name='Город')),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Широта')),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Долгота')),
                ('delivery_radius_km', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Радиус доставки')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('is_only_warehouse', models.BooleanField(default=False, help_text='Отметьте, если склад не продается в розницу', verbose_name='Только для склада')),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ProductInfo.brand', verbose_name='Бренд')),
            ],
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('schedule_type', models.CharField(choices=[('store', 'Магазин'), ('warehouse', 'Склад')], default='store', help_text='Для магазина или склада', max_length=20, verbose_name='Тип графика')),
                ('weekday', models.PositiveSmallIntegerField(choices=[(0, 'Понедельник'), (1, 'Вторник'), (2, 'Среда'), (3, 'Четверг'), (4, 'Пятница'), (5, 'Суббота'), (6, 'Воскресенье')], verbose_name='День недели')),
                ('is_working', models.BooleanField(default=True, verbose_name='Рабочий день')),
                ('open_time', models.TimeField(default='09:00', verbose_name='Время открытия')),
                ('close_time', models.TimeField(default='18:00', verbose_name='Время закрытия')),
                ('is_retail_open', models.BooleanField(default=True, help_text='Открыта ли розничная торговля', verbose_name='Розничная торговля')),
                ('is_delivery_available', models.BooleanField(default=True, help_text='Работает ли доставка', verbose_name='Доставка доступна')),
                ('is_warehouse_open', models.BooleanField(default=True, help_text='Работает ли склад', verbose_name='Склад открыт')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ProductInfo.store', verbose_name='Магазин/Склад')),
            ],
            options={
                'verbose_name': 'График работы',
                'verbose_name_plural': 'Графики работы',
                'db_table': 'schedules',
                'ordering': ['store', 'schedule_type', 'weekday'],
            },
        ),
        migrations.AddField(
            model_name='product',
            name='store',
            field=models.ForeignKey(help_text='К какому складу/магазину относится товар', on_delete=django.db.models.deletion.CASCADE, to='ProductInfo.store', verbose_name='Склад/Магазин'),
        ),
        migrations.CreateModel(
            name='PriceHistory',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('old_price', models.DecimalField(decimal_places=2, help_text='Старая цена товара', max_digits=10, verbose_name='Старая цена')),
                ('new_price', models.DecimalField(decimal_places=2, help_text='Новая цена товара', max_digits=10, verbose_name='Новая цена')),
                ('old_discount', models.IntegerField()),
                ('new_discount', models.IntegerField()),
                ('changed_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(help_text='Товар, для которого изменялась цена', on_delete=django.db.models.deletion.CASCADE, to='ProductInfo.product', verbose_name='Товар')),
                ('store', models.ForeignKey(help_text='Склад, на котором изменялась цена', on_delete=django.db.models.deletion.CASCADE, to='ProductInfo.store', verbose_name='Склад')),
            ],
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=0, help_text='Доступное количество товара', verbose_name='Количество')),
                ('reserved', models.PositiveIntegerField(default=0, help_text='Зарезервирован ли товар', verbose_name='Зарезервировано')),
                ('damaged', models.PositiveIntegerField(default=0, help_text='Является ли товар бракованным', verbose_name='Бракованный')),
                ('variant', models.ForeignKey(help_text='Какой вариант товара', on_delete=django.db.models.deletion.CASCADE, to='ProductInfo.productvariant', verbose_name='Вариант товара')),
                ('store', models.ForeignKey(help_text='На каком складе находится товар', on_delete=django.db.models.deletion.CASCADE, to='ProductInfo.store', verbose_name='Склад')),
            ],
            options={
                'verbose_name': 'Остаток товара',
                'verbose_name_plural': 'Остатки товаров',
                'db_table': 'Inventory',
                'ordering': ['store', 'variant'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="Название категории, например 'Напитки'", max_length=255, verbose_name='Название')),
                ('description', models.CharField(help_text='Краткое описание категории', max_length=255, verbose_name='Описание')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Unix timestamp создания записи', verbose_name='Дата создания (timestamp)')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Unix timestamp обновления записи', verbose_name='Дата обновления (timestamp)')),
                ('image', models.CharField(blank=True, help_text='URL изображения логотипа категории', max_length=255, null=True, verbose_name='Логотип')),
                ('store', models.ForeignKey(help_text='Для какого магазина эта категория', on_delete=django.db.models.deletion.CASCADE, to='ProductInfo.store', verbose_name='Магазин')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
                'db_table': 'Categories',
                'ordering': ['store', 'title'],
            },
        ),
        migrations.CreateModel(
            name='SubCategory',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Название подкатегории', max_length=255, verbose_name='Название подкатегории')),
                ('image_url', models.CharField(blank=True, help_text='URL изображения логотипа подкатегории', max_length=255, null=True, verbose_name='Логотип')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания (timestamp)')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления (timestamp)')),
                ('category', models.ForeignKey(help_text='К какой категории относится', on_delete=django.db.models.deletion.CASCADE, to='ProductInfo.category', verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Подкатегория',
                'verbose_name_plural': 'Подкатегории',
                'db_table': 'SubCategories',
                'ordering': ['category', 'title'],
            },
        ),
        migrations.AddField(
            model_name='product',
            name='sub_category',
            field=models.ForeignKey(help_text='К какой подкатегории относится', on_delete=django.db.models.deletion.PROTECT, to='ProductInfo.subcategory', verbose_name='Подкатегория'),
        ),
        migrations.AddField(
            model_name='product',
            name='unit',
            field=models.ForeignKey(blank=True, help_text='В каких единицах измеряется товар', null=True, on_delete=django.db.models.deletion.CASCADE, to='ProductInfo.unit', verbose_name='Единица измерения'),
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.CharField(help_text='Дополнительное изображение товара', max_length=255, verbose_name='Изображение')),
                ('order', models.PositiveIntegerField(default=0, help_text='Порядок отображения изображения', verbose_name='Порядок')),
                ('alt_text', models.CharField(blank=True, help_text='Альтернативный текст для изображения', max_length=255, verbose_name='Alt текст')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('product', models.ForeignKey(help_text='Товар, к которому относится изображение', on_delete=django.db.models.deletion.CASCADE, related_name='product_images', to='ProductInfo.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Изображение товара',
                'verbose_name_plural': 'Изображения товаров',
                'db_table': 'Product_images',
                'ordering': ['product', 'order'],
                'unique_together': {('product', 'order')},
            },
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['barcode'], name='Product_var_barcode_4c0a0f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='schedule',
            unique_together={('store', 'schedule_type', 'weekday')},
        ),
        migrations.AddIndex(
            model_name='inventory',
            index=models.Index(fields=['variant'], name='Inventory_variant_95c0dd_idx'),
        ),
        migrations.AddIndex(
            model_name='inventory',
            index=models.Index(fields=['store'], name='Inventory_store_i_3d9431_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='inventory',
            unique_together={('variant', 'store')},
        ),
        migrations.AlterUniqueTogether(
            name='subcategory',
            unique_together={('category', 'title')},
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['internal_sku'], name='Products_interna_4bff87_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['group_id'], name='Products_group_i_31786c_idx'),
        ),
    ]
